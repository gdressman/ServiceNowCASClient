gs.include("PrototypeServer");

var CASSingleSignOn = Class.create();
CASSingleSignOn.prototype = {
    initialize: function() {
        this.service = gs.getProperty("glide.servlet.uri");
        this.caslogin = gs.getProperty("glide.authenticate.cas.loginurl");
        this.serviceURL = this.service + 'navpage.do';
    },
    
    process : function() {
        var relayState= this.generateRelayState();
        var ticket = request.getParameter('ticket');
        var requestURI = request.getRequestURI();
        //gs.log('ticket: ' + ticket);
        
        if(ticket == null || ticket == ''){
            var redirURL;
            redirURL = this.caslogin + "?service=" + relayState;
            
            if(relayState.indexOf('frame_bust.do')>=0)
                redirURL = relayState;
            
            //gs.log("Redirecting to: " + redirURL);
            return redirURL;
        }
        
        if (ticket) {
            
            var nameId = this.validate(ticket, relayState);
            //gs.log('nameId ' + nameId);
            if (nameId == null) {
                this.logError("Could not extract NameID from CAS validation");
                return "failed_missing_requirement";
            }
            
            var uri;// = request.getParameter("uri");
            var qs = request.getQueryString();
            //gs.log("Query String (qs): " + qs);
            //gs.log("uri: " + request.getParameter("uri"));
            
            if(qs){
                uri = '/nav_to.do?' + qs;
                //gs.log("We will be redirecting user to: " + uri.replace(/&/g,"%26"));
                action.setRedirect(uri.replace(/&/g,"%26"));
            }
            return this.loginUser(nameId);
            
        } else {
            return "failed_authentication";
        }
    },
    
    validate : function(ticket, service) {
        var valURL = this.caslogin +'/validate?ticket=' + ticket + '&service=' + service;
        //gs.log('valURL ' + valURL);
        
        var getMethod = new Packages.org.apache.commons.httpclient.methods.GetMethod(valURL);
        var httpClient = new GlideHTTPClient();
        var result = httpClient.executeMethod(getMethod);
        if (result != "200"){
            gs.log("GCSearch:: Query failed with HTTP Error " + result);
        }
        var response = getMethod.getResponseBodyAsString();
        getMethod.releaseConnection();
        
        var sections = response.split('\n');
        if (sections.length >= 1) {
            if (sections[0] == 'no') {
                return 'undefined';
            } else if (sections[0] == 'yes' &&  sections.length >= 2){
                return sections[1];
            }
        }
    },
    
    generateRelayState : function() {
        //Set up base url
        var urlTokens = /^(http(s?)\:\/\/.*)\/\S+$/(this.serviceURL);
        var baseURL = this.serviceURL;
        if(urlTokens && urlTokens.length > 1) baseURL = urlTokens[1];
            //gs.log("Stripping down the serviceURL: "+this.serviceURL+" to a base URL of: "+baseURL);
        
        //grab the request URI and query string from the request
        var requestURI = request.getRequestURI();
        //gs.log("requestURI: " + requestURI);
        var qs = request.getQueryString();
        //gs.log("Query String (qs): " + qs);
        var ticket = request.getParameter("ticket");
        var sysparm = request.getParameter("sysparm_userpref_module");
        //gs.log("Ticket Parameter: " + ticket);
        var uriparam = request.getParameter("uri");
        //gs.log("URI Parameter: " + uriparam);
        
        //Request coming off the street.
        if (!requestURI || requestURI.equals("") || requestURI.equals("/") || requestURI == "/navpage.do") {
            return this.serviceURL;
        }
        
        if(uriparam){
            //Deep Linking
            relayState = encodeURIComponent(baseURL + "/nav_to.do?" + qs.replace("&ticket=" + ticket, ""));
        }
        else
			relayState = this.service + "frame_bust.do?sysparm_url=" + encodeURIComponent(baseURL + "/nav_to.do?uri=" + encodeURIComponent(requestURI + "?" + qs));
        
        //gs.log("Generating a Relay State of: " + relayState);
        return relayState;
    },
    
    loginUser : function (nameId) {
        if (nameId == null) {
            return "failed_missing_requirement";
        }
        
        var ugr = new GlideRecord("sys_user");
        ugr.addQuery("user_name", nameId);
        ugr.query();
        if (!ugr.next()) {
            var errorMessage = gs.getMessage("User: ") + nameId + gs.getMessage(" not found");
            this.logError(errorMessage);
            return "failed_authentication";
        }
        
        var userName = ugr.getValue("user_name");
        return userName;
    },
    
    logError : function (msg) {
        var lMsg = gs.getMessage(msg);
        gs.log(lMsg);
        gs.addErrorMessage(lMsg);
    }
    
};
